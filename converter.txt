#Converter dataset que estava com labels no formato errado

import os
from PIL import Image

def convert_vertices_to_bbox(label_file, image_width, image_height):
    # Lê o arquivo de rótulo e extrai as coordenadas dos vértices
    with open(label_file, 'r') as file:
        lines = file.readlines()

    bboxes = []
    for line in lines:
        # Extrai as coordenadas dos vértices (assumimos que são 8 números)
        coords = list(map(int, line.strip().split()))

        # As coordenadas fornecidas são (x1, y1, x2, y2, ..., x4, y4) para os vértices
        x_coords = coords[::2]  # coordenadas x (índices 0, 2, 4, 6)
        y_coords = coords[1::2]  # coordenadas y (índices 1, 3, 5, 7)

        # Calcula a caixa delimitadora
        xmin = min(x_coords)
        xmax = max(x_coords)
        ymin = min(y_coords)
        ymax = max(y_coords)

        # Calcula o centro e as dimensões da caixa delimitadora
        x_center = (xmin + xmax) / 2
        y_center = (ymin + ymax) / 2
        width = xmax - xmin
        height = ymax - ymin

        # Normaliza as coordenadas
        x_center_normalized = x_center / image_width
        y_center_normalized = y_center / image_height
        width_normalized = width / image_width
        height_normalized = height / image_height

        # Adiciona a caixa delimitadora normalizada à lista
        bboxes.append(f"0 {x_center_normalized} {y_center_normalized} {width_normalized} {height_normalized}\n")

    # Escreve as novas coordenadas de rótulo no arquivo
    with open(label_file, 'w') as file:
        file.writelines(bboxes)

def process_labels(labels_dir, images_dir):
    # Percorre todos os arquivos de imagem na pasta "images"
    for image_file in os.listdir(images_dir):
        if image_file.endswith('.jpg') or image_file.endswith('.jpeg') or image_file.endswith('.png'):
            # Cria o caminho completo para o arquivo de imagem
            image_path = os.path.join(images_dir, image_file)

            # Obtém as dimensões da imagem
            img = Image.open(image_path)
            image_width, image_height = img.size

            # Ajuste para o formato do nome do arquivo de rótulo
            label_filename = image_file.replace('.jpg', '').replace('.jpeg', '').replace('.png', '') + '.txt'
            label_file = os.path.join(labels_dir, label_filename)

            if os.path.exists(label_file):
                # Converte o arquivo de rótulo
                convert_vertices_to_bbox(label_file, image_width, image_height)
            else:
                print(f"Arquivo de rótulo não encontrado para {image_file}")


# Caminho para os diretórios de rótulos e imagens
labels_dir = '/content/drive/MyDrive/Dataset_Tomate/train/labels'
images_dir = '/content/drive/MyDrive/Dataset_Tomate/train/images'

# Processa todos os arquivos de rótulos
process_labels(labels_dir, images_dir)

# Caminho para os diretórios de rótulos e imagens
valid_labels_dir = '/content/drive/MyDrive/Dataset_Tomate/valid/labels'
valid_images_dir = '/content/drive/MyDrive/Dataset_Tomate/valid/images'

# Processa todos os arquivos de rótulos
process_labels(valid_labels_dir, valid_images_dir)

import os
from PIL import Image

# Caminhos
images_dir = "/content/drive/MyDrive/Dataset_Tomate/train/images"
labels_dir = "/content/drive/MyDrive/Dataset_Tomate/train/labels"

# Verifica imagens e rótulos
for image_file in os.listdir(images_dir):
    if image_file.endswith(".jpg"):
        label_file = os.path.join(labels_dir, image_file.replace(".jpg", ".txt"))

        # Verifica se o rótulo correspondente existe
        if not os.path.exists(label_file):
            print(f"Label missing for image: {image_file}")

        # Verifica se a imagem está corrompida
        try:
            with Image.open(os.path.join(images_dir, image_file)) as img:
                img.verify()
        except Exception as e:
            print(f"Corrupt image detected: {image_file} ({e})")